1. Создадим последовательность p1 целых чисел от 1 до 10
p1: 1 2 3 4 5 6 7 8 9 10 
2. Добавим еще несколько чисел в конец p1 из cin
p1: 1 2 3 4 5 6 7 8 9 10 49 3 -1 3 4 9 10 1093 
3. Перемешаем p1 случайным образом
p1: 8 7 2 4 6 3 4 1093 9 1 3 -1 9 5 49 10 10 3 
4. Удалим дубликаты из p1
p1: -1 1 2 3 4 5 6 7 8 9 10 49 1093 
5. Подсчитаем количество нечетных чисел в p1
Quantity of odd numbers: 8
6. Определим минимальное и максимальное значения в p1
Min: -1, max: 1093
7. Попробуем найти хотя бы одно простое число в p1
Prime number: 2
8. Заменим все числа в p1 их квадратами
p1: 1 1 4 9 16 25 36 49 64 81 100 2401 1194649 
9. Создадим последовательность p2 из N случайных чисел, где N - длина p1
p2: -86 631 558 942 641 648 150 682 733 -95 899 940 69 
10. Вычислим сумму чисел в p2
p2 sum: 6712
11. Заменим первые несколько чисел из p2 числом 1
p2: 1 1 1 1 1 1 1 1 1 -95 899 940 69 
12. Создадим последовательность p3 как разность p1 и p2
p3: 0 0 3 8 15 24 35 48 63 176 -799 1461 1194580 
13. Заменим каждый отрицательный элемент в p3 нулем
p3: 0 0 3 8 15 24 35 48 63 176 0 1461 1194580 
14. Удалим полностью все нулевые элементы из p3
p3: 3 8 15 24 35 48 63 176 1461 1194580 
15. Изменим порядок следования элементов в p3 на обратный
p3: 1194580 1461 176 63 48 35 24 15 8 3 
16. Определим быстро топ-3 наибольших элемента в p3
Largest numbers: 1194580 1461 176 
17. Отсортируем полностью p1 и p2 по возрастанию
p1: 1 1 4 9 16 25 36 49 64 81 100 2401 1194649 
p2: -95 1 1 1 1 1 1 1 1 1 69 899 940 
18. Создадим последовательность p4 как слияние p1 и p2
p4: -95 1 1 1 1 1 1 1 1 1 1 1 4 9 16 25 36 49 64 69 81 100 899 940 2401 1194649 
19. Определим диапазон для упорядоченной вставки числа 1 в p4
Sorted range to insert 1 is from 1 to 12
20. Выведем все последовательности в cout
p1: 1 1 4 9 16 25 36 49 64 81 100 2401 1194649 
p2: -95 1 1 1 1 1 1 1 1 1 69 899 940 
p3: 1194580 1461 176 63 48 35 24 15 8 3 
p4: -95 1 1 1 1 1 1 1 1 1 1 1 4 9 16 25 36 49 64 69 81 100 899 940 2401 1194649 
21. Создадим последовательность p5 и p6 целых чисел от 1 до 64 и остсортируем с помощью std::sort и std::nth_element, подсчитав, количество сортировкок
If sort_init_size = 64 is less than std::_ISORT_MAX = 32 then std::nth_element will full sort the sequece
p5&p6: 59 36 33 34 31 58 56 42 47 45 38 63 6 30 19 14 25 16 37 2 20 61 40 46 53 27 7 49 64 55 29 21 13 12 17 43 48 32 35 51 26 28 50 44 18 4 5 52 41 1 54 62 23 24 3 60 9 8 11 22 57 39 10 15 
p5 had 544 std::sort operations
p5: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 
p6 had 310 std::nth_element sort operations
p6: 18 11 8 3 24 10 23 1 9 15 5 4 6 21 19 14 12 16 17 2 20 7 13 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 48 61 54 62 59 51 53 52 63 50 56 58 57 55 64 60 
