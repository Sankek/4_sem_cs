1. Почему класс std::string имеет много перегруженных функций-членов?
Потому что этот класс имеет очень большое число функций, он отвечает как за работу с
индексами, итераторами, поддержку си строк, разных типов чаров, и т .д.
И для работы всего этого необходимо иметь для всех поддерживаемых аргументов перегрузки, получается крайне большой класс.

2. Как осуществляется интернационализация и локализация программы?
Можно использовать std::locale, std::facet, и boost/locale
Возможность менять кодировку для считывания и вывода.
Работа с кодировками для обработки строк, как например в задаче про транслитеризацию.
Работа с форматами ввода-вывода денег, дат, чисел, как например в задаче про конвертацию валют.

3. Чем отличаются многобайтовые кодировки от широких кодировок?

Широкие кодировки         = определенное число байтов для каждого символа,
                          +: легко работать со строкой, быстрый доступ по индекс
                          -: занимает много памяти
Многобайтовые кодировки - = кодируется неопределенное число байт для разных символов в зависимости от их важности
                            в байте несколько бит отводится для того, чтобы потом можно было декодировать символ
                          +: занимает меньше места
                          -: функции работы с кодировками фиксированного размера не работают, доступ за O(n)

4. Какие компоненты входят в стандарт кодирования символов Unicode?
1) UCS - универсальный набор символов (Universal character set),
   - просто перечисление всех доступных символов
2) UTF - семейства кодировок (Unicode transformation format) -
   способ хранения символов в памяти, сопостовляет каждому символу из UCS набор байтов

5. Для решения каких задач удобно использовать регулярные выражения?
Для сравнений входной строки с регулярным выражением.
Для поиска шаблонов, соответствующих регулярному выражению.
Для разметки символов соответствующих разделителю, заданного в виде регулярного выражения.
Для замены последовательностей символов, соответствующих регулярному выражению.


