1. Что такое контекстное переключение?

Это процесс переключения исполнителя между задачами. Он включает в себя сохранение данных текущей задачи и
счетчика команд, далее идет загрузка данных другой задачи, на которую он решит переключиться.

2. Назовите основные подходы к организации параллелизма.

Процессы и потоки. Первые - отдельные программы на уровне ОС, следовательно имеют разные адресные пространства, что
обеспечивает некоторую безопасность их взаимодействия, при этом обмен данными между ними гораздо медленнее, чем у потоков.
Потоки создаются в одном процессе, что позволяет быстро обмениваться данными, быстрый доступ к общей памяти.
При этом необходимо следить за тем, чтобы потоки не нарушали общую работу друг друга.

3. Что может влиять на производительность параллельных алгоритмов?

На производительность влияет кол-во исполнителей, способ разделения их обязанностей в конкретной задаче. На контекстные
переключения может затрачиваться слишком много времени, что уменьшит производительность, поэтому в каждм случае
стоит смотреть на замеры производительности.

4. Как в стандартной библиотеке реализована концепция асинхронного исполнения?

Через std::future, std::async. Так, функции могут выполнять работу параллельно, без необходимости окончания работы
предыдуших функций. Через методы get и wait уже можно дожидаться результата их работы.

5. Что нужно учитывать при замене последовательной реализации алгоритма на параллельную?

Нужно учитывать сложность задачи. Будет ли её эффективней заменять на параллельную реализацию зависит от конкретного
случая, который порой сложно предсказать, и лучше делать непосредственные замеры в обоих случаях, так как
версия без параллелизации может работать быстрее, за счет затрат на контекстное переключение, создание потоков,
обращения к памяти, - всё это занимает достаточно много времени, что излишне, если задача: посчситать сумму чисел
от 1 до N.
